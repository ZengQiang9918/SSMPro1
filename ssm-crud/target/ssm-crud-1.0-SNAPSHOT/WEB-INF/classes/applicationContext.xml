<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--spring的配置文件 主要配置和业务逻辑有关的-->
    <!--数据源，事务控制，mybatis的整合-->

    <!--加载properties配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!--组件扫描器-->
    <context:component-scan base-package="com.atguigu.crud.service"/>

    <!--配置druid数据源，数据连接池-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--=========================================================-->

    <!--spring和mybatis的整合-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.crud.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--！！！新接触-->
    <!--获取sqlSession对象-->
    <!--配置一个可以执行批量的sqlSession-->
    <!--该类无对应的set方法。只能采用构造注入-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <!--ExecutorType是一个枚举类型-->
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--===================================================-->
    <!--事务控制的配置-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--开启基于注解的事务，使用xml配置形式的事务（重要的东西使用配置式）-->
    <tx:advice id="myAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <!--*表示所有方法-->
            <tx:method name="*"/>
            <!--所有的get方法都是只读的-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置事务增强-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>

</beans>